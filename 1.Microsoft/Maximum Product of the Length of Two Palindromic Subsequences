class Solution {
    int ans = 1;

    public int maxProduct(String s) {
        int[][] dp = new int[s.length() + 1][s.length() + 1];
        for (int i = 0; i < dp.length; i++) {
            Arrays.fill(dp[i], -1);
        }

        LPS(s, "", "", 0, dp);
        return ans;
    }

    public void LPS(String s, String s1, String s2, int indx, int[][] dp) {
        int ls1 = s1.length();
        int ls2 = s2.length();

        // If both strings are palindromes, update the maximum product.
        if (isPalindrome(s1) && isPalindrome(s2)) {
            ans = Math.max(ls1 * ls2, ans);
        }

        // If we've processed all characters, return.
        if (indx >= s.length()) {
            return;
        }

        // Recursive calls:
        LPS(s, s1 + s.charAt(indx), s2, indx + 1, dp); // Add to s1
        LPS(s, s1, s2 + s.charAt(indx), indx + 1, dp); // Add to s2
        LPS(s, s1, s2, indx + 1, dp); // Skip current character
    }

    public boolean isPalindrome(String s) {
        int left = 0;
        int right = s.length() - 1;

        while (left <= right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }

        return true;
    }
}
