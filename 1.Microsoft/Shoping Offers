class Solution {
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        return knapsack(price , special , needs , new HashMap<>());
    }
    public int knapsack(List<Integer> price , List<List<Integer>> special , List<Integer> needs , HashMap<List<Integer> , Integer> map){
        if(map.containsKey(needs)){
            return map.get(needs);
        }

        int cost = 0;
        for(int i=0 ; i<needs.size() ; i++){
            cost += (price.get(i)*needs.get(i));
        }

        for(List<Integer> list : special){
            List<Integer> updatedNeed = new ArrayList<>(needs);
            boolean valid = true;

            for(int i=0 ; i<needs.size() ; i++){
                if(updatedNeed.get(i) < list.get(i)){
                    valid = false;
                    break;
                }

                updatedNeed.set(i , updatedNeed.get(i)-list.get(i));
            }   

            if(valid){
                cost = Math.min(cost , list.get(needs.size()) + knapsack(price , special , updatedNeed , map));
            }
        }

        map.put(needs , cost);
        return cost;
    }
}
