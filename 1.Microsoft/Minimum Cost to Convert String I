class Solution {
    public long minimumCost(String source, String target, char[] original, char[] changed, int[] cost) {
        int V = 26;
        int[][] dist = new int[26][26];

        for(int i=0 ; i<26 ; i++){
            Arrays.fill(dist[i] , Integer.MAX_VALUE);
            dist[i][i] = 0;
        }

        for(int i=0 ; i<original.length ; i++){
            int u = original[i]-'a';
            int v = changed[i]-'a';

            dist[u][v] = Math.min(dist[u][v] , cost[i]);
        }

        for(int k=0 ; k<V ; k++){
            for(int i=0 ; i<V ; i++){
                for(int j=0 ; j<V ;j++){
                    if(dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE){
                        dist[i][j] = Math.min(dist[i][j] , dist[i][k] + dist[k][j]);
                    }
                }
            }
        }
        
        long minCost = 0;
        for(int i=0 ; i<source.length() ; i++){
            int u = source.charAt(i)-'a';
            int v = target.charAt(i)-'a';

            if(u == v){
                continue;
            }
            if(dist[u][v] == Integer.MAX_VALUE){
                return -1;
            }

            minCost += dist[u][v];
        }

        return minCost;
    }
}
