class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int n = isWater.length;
        int m = isWater[0].length;
        boolean[][] visited = new boolean[n][m];
        Queue<int[]> queue = new LinkedList<>();

        for(int i=0 ; i<n ; i++){
            for(int j=0 ; j<m ; j++){
                if(isWater[i][j] == 1){
                    visited[i][j] = true;
                    isWater[i][j] = 0;
                    queue.add(new int[]{i,j});
                }
            }
        }

        int[] dRow = {-1,0,1,0};
        int[] dCol = {0,1,0,-1};

        while(!queue.isEmpty()){
            int[] nums = queue.poll();
            int row = nums[0];
            int col = nums[1];

            for(int i=0 ; i<4 ; i++){
                int nRow = row + dRow[i];
                int nCol = col + dCol[i];

                if(nRow>=0 && nRow<n && nCol>=0 && nCol<m && !visited[nRow][nCol]){
                    isWater[nRow][nCol] = isWater[row][col] + 1;
                    visited[nRow][nCol] = true;
                    queue.add(new int[]{nRow,nCol});           
                }
            }
        }

        return isWater;
    }
}
